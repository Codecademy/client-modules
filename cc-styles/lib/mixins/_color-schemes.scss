@function get-color($scheme, $which) {
  /*
     Example:
     get-color(white, secondary)
     => $grey4
  */

  @if $scheme == white {
    @return nth($color-scheme--white, index($color-scheme-keys, $which));
  } @else if $scheme == grey {
    @return nth($color-scheme--grey, index($color-scheme-keys, $which));
  } @else if $scheme == darkgrey {
    @return nth($color-scheme--darkgrey, index($color-scheme-keys, $which));
  } @else if $scheme == mint {
    @return nth($color-scheme--mint, index($color-scheme-keys, $which));
  } @else if $scheme == darkblue {
    @return nth($color-scheme--darkblue, index($color-scheme-keys, $which));
  } @else if $scheme == blue {
    @return nth($color-scheme--blue, index($color-scheme-keys, $which));
  }
  @return 0;
}

/*
  Example:

  .progress-bar__inside {
    @include apply-color(background-color, secondary);
  }

  Generates:

  .color-scheme--white .progress-bar__inside {
    background-color: $grey4;
  }
  .color-scheme--grey .progress-bar__inside {
    background-color: $grey4;
  }
  .color-scheme--darkgrey .progress-bar__inside {
    background-color: $grey5;
  }
  .color-scheme--mint .progress-bar__inside {
    background-color: white;
  }

  Ta-dah.
*/

@mixin apply-color($attr, $which, $opacity: 1.0) {
  %color-scheme--white & {
    #{$attr}: rgba(get-color(white, $which), $opacity) !important;
  }
  %color-scheme--grey & {
    #{$attr}: rgba(get-color(grey, $which), $opacity) !important;
  }
  %color-scheme--darkgrey & {
    #{$attr}: rgba(get-color(darkgrey, $which), $opacity) !important;
  }
  %color-scheme--mint & {
    #{$attr}: rgba(get-color(mint, $which), $opacity) !important;
  }
  %color-scheme--blue & {
    #{$attr}: rgba(get-color(blue, $which), $opacity) !important;
  }
  %color-scheme--darkblue & {
    #{$attr}: rgba(get-color(darkblue, $which), $opacity) !important;
  }

  // Nested color schemes!
  $color-scheme--nested: '';
  @for $i from 1 through 3 {
    $color-scheme--nested: $color-scheme--nested + '[class*="color-scheme--"] ';
    #{$color-scheme--nested} %color-scheme--white & {
      #{$attr}: rgba(get-color(white, $which), $opacity) !important;
    }
    #{$color-scheme--nested} %color-scheme--darkgrey & {
      #{$attr}: rgba(get-color(darkgrey, $which), $opacity) !important;
    }
    #{$color-scheme--nested} %color-scheme--mint & {
      #{$attr}: rgba(get-color(mint, $which), $opacity) !important;
    }
    #{$color-scheme--nested} %color-scheme--grey & {
      #{$attr}: rgba(get-color(grey, $which), $opacity) !important;
    }
    #{$color-scheme--nested} %color-scheme--darkblue & {
      #{$attr}: rgba(get-color(darkblue, $which), $opacity) !important;
    }
  }
}

// Generic color schemes on entire elements for
// application via classnames and @include

@mixin color-scheme($name, $colors) {
  $primary:   nth($colors, 1);
  $secondary: nth($colors, 2);
  $tertiary:  nth($colors, 3);
  $accent:    nth($colors, 4);

  %color-scheme--#{$name} {
    color: $secondary;

    background-color: $primary;

    .new-cc-icon, .cc-symbol, .cc-achievement { color: $tertiary; }

    small { .new-cc-icon, .cc-achievement { color: $secondary; } }

    p, small, input:not([type="submit"]), ul, li, { color: $secondary; }
    h1, h2, h3, h4, h5, h6 {
      color: $tertiary;
    }

    td, th {
      border: 1px solid lighten($secondary, 40%);
    }

    th {
      color: $tertiary;
    }

    a:not(.button) { color: $tertiary; }

    .field.field--text {
      border-color: rgba($secondary, 0.5);

      input[type="text"], input[type="password"], textarea {
        color: $tertiary;
      }

      // You can't list these selectors using commas, it's stupid
      ::-webkit-input-placeholder {
        color: $secondary;
      }
      ::-moz-placeholder {
        color: $secondary;
      }
      input:-moz-placeholder {
        color: $secondary;
      }
      input:-ms-input-placeholder {
        color: $secondary;
      }
    }
  }
  .color-scheme--#{$name} {
    @extend %color-scheme--#{$name};
  }
}
